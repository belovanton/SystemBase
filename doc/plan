Проверки
+* Схема
* Action'ы
* Модель
* Фикстуры
* Формы
** Виджеты
** Валидаторы
* Task'и
* Тесты
* Конфиги

Диаграммы:
+* Жизненный цикл пользователя.
 +* Создание.
  +* Внутренняя учетная запись
   +* Скрипт-синхронизатор с LDAP
   +* Присвоение прав.
  +* Внешняя учетная запись
   +* Регистрация.
   +* Уведомление администратора
  +* Добавление фильтрующих вкладок по умолчанию.
  +* Tense
   +* (D) У исполнителя все-таки должна быть возможность изменить тему. Но в таком случае возможен саботаж (переброс своей заявки на другого). Значит, должна быть возможность отслеживания переходов заявки. // Технический комментарий
   +* (D) Бывает и такое, что из организации уходит источник. // Закрывать все его заявки интегратором
   +* (D) Если исполнитель передает заявку другому, но не имеет прав на просмотр чужих заявок, то он не сможет отредактировать ее или добавить комментарий. // "Это не нужно" (с)
  -* Antitense
   -* (D) При удалении пользователя срабатывает ограничение внешнего ключа на прикрепленность к теме. // Можно реализовать собственную проверку
 +* Авторизация.
  +* Авторизующие ссылки.
 +* Ограничение прав.
 +* Различия между внутренними и внешними. Обосновать использование одной таблицы.
 +* Удаление.
  +* (D) Закрывать все инициированные им заявки.
  +* (D) Запретить удаление пользователя, прикрепленного к темам.
  +* (D) При удалении заявки, которая является зависимостью для другой заявки, может возникнуть событие "Зависимость разрешена".
+* Жизненный цикл заявки
 +* Изменение каждого из полей:
  +* Статус.
  +* Тема.
  +* Текст.
 +* Добавление файла.
 +* Добавление комментария.
 +* Автозакрытие по истечении T=10 суток с момента установки статуса «Выполнена».
 +* (D) Тема заявки и ее исполнитель — раздельные, хоть и связанные сущности. При установке темы меняется исполнитель, но он также может быть изменен и без этого (концепция связующей таблицы). Это подтверждается тем фактом, что в одном отделе не менее трех людей: основной, замещающий, ответственный.
+* Жизненный цикл файла заявки.
+* Жизненный цикл комментария.
+* Жизненный цикл темы.
+* Система вкладок.
 +* (D) Следует реализовать в виде BorderLayout, чтобы при выборе зависимой заявки отобразить всю панель в окне. 
 * Отчеты.
  * Создание.
  * Генерация.
  * Настройки.
   * Проверять при сохранении принадлежность настроек конкретному пользователю.
 * Уведомления по e-mail и XMPP.
  * Уведомления об отсутствии ответа (раз в сутки по истечении N=72-х часов с момента последней активности)
 * Логирование.
  * Включить MySQL-лог всех запросов, кроме SELECT.
  * Что логировать:
   * Изменения объектов:
    * Таблица объекта.
    * Класс объекта.
     * (D) Одной таблицы недостаточно, так как может использоваться эмуляция наследования.
    * Предыдущее состояние объекта.
     * (D) JSON без конвертирования UTF-символов?
    * Текущее состояние объекта.
    * id пользователя, выполнившего операцию.
    * Время.
   * Авторизация
 * Способ отображения главной страницы + автообновление.
  * О, можно мигать вкладкой. Делаем?
 * Отображение таблицы.
  * Листалка.
  * Сортировка.
  * Статусы заявок.
 * Sanity checker.
  * Конфиг с настройками проверок.
   * Implementation detail: проверять наличие функции, писать в лог при отсутствии.
  * Высокие группы у внешнего пользователя.
  * Отсутствие группы у пользователя.
 * Перенос имеющихся заявок.
 * → пройдись еще раз по переписке.
 * → пройдись еще раз по требованиям.

Тест-план
 * Хороший тестер — проверяет возможность прохода по жизненным циклам.
  * Зайти на страницу открытой заявки
   * Ввести комментарий :: Текст отобразится на странице.
   * (проверка функционала для плохого тестера) Послать POST-запрос на добавление комментария :: Текст отобразится на странице. // Параметризовывать функции подобного рода? Ведь проверить можно любой текст. С другой стороны, часто ли будут использовать эту функцию?
 * Плохой тестер — проверяет невозможность отступления от жизненного цикла.
  * Зайти на страницу закрытой заявки.
   * Проверить наличие формы комментария :: Форма отсутствует.
   * Послать POST-запрос на добавление комментария :: Сервер вернет ошибку [TODO: определить точный статус].
  * Meta: после каждого действия, вызывающего ответ сервера, проверять страницу на предмет ошибок PHP.
  * Идея: тесты на параллельные действия из одного состояния страницы.
   * Например:
    * Открыть в двух вкладках главную страницу. Поскольку авторизации нет, появится форма входа.
    * Авторизоваться в одной вкладке.
    * Авторизоваться в другой.
    * Ожидаемый результат: обе вкладки должны показать главную страницу пользователя.

Мысли
 * Тема «Другое» должна быть реальной темой, и обязательной только на первом уровне. Если пользователь не будет уверен в теме заявки, он просто выберет более-менее подходящую.
 * Автоматизировать процесс добавления групп не нужно. Возможность создания заявки будет у пользователя всегда, а высокие привилегии можно добавить руками из мегадминки.
 * Продать скрипт аудита часто изменяемых тем.
 * Тестер следит за фикстурами и формирует их таким образом, чтобы покрыть все возможные ситуации минимальным набором объектов.

Включи в стоимость:
 * Мегадминка
  * Генерация
  * Доведение до ума.
  * Оформление.
 * Работоспособность в MSIE 8 и других браузерах.

Расписание Ко:
 * 25.10 — Знакомство с нашими диаграммами.
  * Допиливание комментариев до работоспособности.
  * Прописывание пользовательских групп и прав (может, SET'ом?).
 * 26.10 — Интеграция с LDAP.
  * Установка нашей копии с их базой.
  * Установка нашей копии с нашей базой.
  * Создание пользователей.
  * Автоматическое присвоение групп.
  * Редактирование пользователей через LDAP.
  * Выкатывание на сервер с настройкой cron'a.
 * 27.10 — Внешние пользователи.
  * Регистрация. + 
  * Подтверждение e-mail.
  * Автоматическое присвоение группы (учесть, что внешний пользователь может быть только инициатором и, соответственно, не может быть исполнителем). +
  * Смена пароля. +
  * Генерация стандартной админки с модулем пользователей. +
  * Принудительная активация/деактивация пользователей через админку. +
  * Блокирование удаления на уровне базы. +
   * Положить в файл SQL для создания пользователя, под которым система будет соединяться с базой данных. +
   * Добавить в него отключение привилегий на удаление из таблицы пользователей. +

Расписание Саши:
 * 25.10 — Завершение диаграмм.
 * 26.10 — Темы.
  * Описание модели.
  * Создание новой темы (учесть варианты с родительской темой и без нее).
  * Отображение темы.
 * 27.10 — Роли темы.
  * Добавление.
  * Редактирование.
  * Удаление.
  * Отображение ролей на странице темы.
  * Логирование операций с ролью 
   * (D) Расширить стандартный класс для логирования, добавив в него новые указатели и возможность отправлять информацию от определенных указателей в спецтаблицу.
 * 28.10 — Темы.
  * Редактирование.
   * Добавить postValidator на случай, когда на уникальную должность (primary_executor) назначают двух пользователей.
  * Блокирование удаления на уровне базы.
   * Добавить в SQL создания пользователя БД отключение привилегий на удаление из таблицы тем.
  * Метод исключения неактивных тем при выборке: 
   * if ($excludeInactive) {
		TopicPeer::excludeInactive($sql);
	  }
  * Рефакторинг с учетом комментариев Ко и Дениса.

  Заметки:
  * Дополнительное правило - можно устанавливать флаг "срочно" у заявки.

Расписание Дениса:
 * 
